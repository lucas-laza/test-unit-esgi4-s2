import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import OrdersPage from "./OrdersPage";
import OrderPage from "./OrderPage";
import { MemoryRouter, Route, Routes } from "react-router-dom";

jest.mock("./lib/http", () => ({
  sendGetRequest: jest.fn((url) => {
    if (url === "/api/orders") {
      return Promise.resolve([
        { id: "order1", submitted: false },
        { id: "order2", submitted: true }
      ]);
    } else if (url.startsWith("/api/orders/")) {
      return Promise.resolve({
        id: "order1",
        submitted: false,
        submittedAt: null,
        articlesInOrder: [{ id: "article1", article: { id: "a1", name: "Chair" }, quantity: 4 }],
      });
    }
    return Promise.reject(new Error("Invalid URL"));
  }),
  sendPutRequest: jest.fn().mockResolvedValue({}),
}));

describe("Order Management", () => {
  describe("OrdersPage", () => {
    it("displays loading initially and orders list after fetching", async () => {
      render(
        <MemoryRouter>
          <OrdersPage />
        </MemoryRouter>
      );

      expect(screen.getByText("Loading orders...")).toBeInTheDocument();

      await waitFor(() => {
        // Ensure links to orders are rendered and contain correct text
        const orderLinks = screen.getAllByRole('link');
        expect(orderLinks).toHaveLength(2);
        expect(orderLinks[0]).toHaveTextContent("order1");
        expect(orderLinks[1]).toHaveTextContent("order2");
      });
    });
  });

  describe("OrderPage", () => {
    it("renders order details and allows submitting an order", async () => {
      render(
        <MemoryRouter initialEntries={["/orders/order1"]}>
          <Routes>
            <Route path="/orders/:id" element={<OrderPage />} />
          </Routes>
        </MemoryRouter>
      );

      await waitFor(() => {
        expect(screen.getByText("Order Details")).toBeInTheDocument();
        expect(screen.getByText("ID: order1")).toBeInTheDocument();
        expect(screen.getByText("Submitted: No")).toBeInTheDocument();
        expect(screen.getByText("Chair")).toBeInTheDocument();
        expect(screen.getByText("Quantity: 4")).toBeInTheDocument();
      });

      const submitButton = screen.getByRole("button", { name: "Submit Order" });
      userEvent.click(submitButton);

      await waitFor(() => {
        expect(screen.queryByText("Submit Order")).toBeNull();
      });
    });
  });
});
